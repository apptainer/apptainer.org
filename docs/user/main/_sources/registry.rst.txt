.. _registry:

####################
OCI Image Registries
####################

It is common for users of {Project} to use `OCI
<https://opencontainers.org/>`__ registries as sources for their container
images. Some registries require credentials to access certain images or even the
registry itself. One method is to supply credentials for each command or set
environment variables to contain the credentials for a single registry. See
the sections on authentication via :ref:`Interactive Login <sec:docker_login>`
and :ref:`Environment Variables <sec:docker_envvars>`.

Alternatively, users can supply credentials on a per-registry basis with the ``registry`` command.

Users can login to an OCI registry with the ``registry login`` command by
specifying a ``docker://`` prefix to the registry hostname:

.. code:: console

   $ {command} registry login --username myuser docker://docker.com
   Password / Token:
   INFO:    Token stored in /home/myuser/.docker/config.json
   INFO:    Token stored in /home/myuser/.apptainer/remote.yaml

   $ {command} registry list

   URI                  SECURE?
   docker://docker.com  ✓

{Project} will automatically supply the configured credentials when
interacting with DockerHub. The checkmark in the ``SECURE?`` column indicates
that {Project} will use TLS when communicating with the registry.

A user can be logged-in to multiple OCI registries at the same time:

.. code:: console

   $ {command} registry login --username myuser docker://registry.example.com
   Password / Token:
   INFO:    Token stored in /home/myuser/.apptainer/remote.yaml

   $ {command} registry list

   URI                            SECURE?
   docker://docker.com            ✓
   docker://registry.example.com  ✓

{Project} will supply the correct credentials for the registry based on the
hostname used, whenever one of the following commands is used with a
``docker://`` or ``oras://`` URI:

`pull
<cli/{command}_pull.html>`__,
`push
<cli/{command}_push.html>`__,
`build
<cli/{command}_build.html>`__,
`exec
<cli/{command}_exec.html>`__,
`shell
<cli/{command}_shell.html>`__,
`run
<cli/{command}_run.html>`__,
`instance
<cli/{command}_instance.html>`__.

.. note::

   It is important for users to be aware that the ``registry login`` command
   will store the supplied credentials or tokens unencrypted in their home
   directory, or in whatever file has been explicitly specified via the
   ``--authfile`` flag (discussed below).

.. _sec:authfile:

***********************
The ``--authfile`` flag
***********************

By default, the ``registry login`` and ``registry logout`` subcommands store
data in, and remove data from, the default credentials-storage file in the
user's ``$HOME/.docker/docker-config.json``.

However, users might be interested in storing the credentials generated by
``registry login`` in a different file. Some example use cases:

* A user wants to generate (and consume) registry credentials as part of a batch
  process. More than one of these batch processes may run in parallel, with
  potentially different credentials, and we therefore want each of them to store
  credentials in a different location.
* One user (or an administrator) wants to create credential files that will then
  be transferred to, and consumed by, a different user.

The ``registry login`` and ``registry logout`` subcommands therefore support an
``--authfile <path>`` flag, which specifies a custom file location for
credential information to be added to (by ``registry login``) or removed from
(by ``registry logout``):

.. code:: 

   $ {command} registry login -u myuser --authfile ./myauthfile docker://docker.io
   Password / Token:
   INFO:    Token stored in ./myauthfile

Once credentials have been added to a file, that file can be used in any of the
commands discussed above (`pull
<cli/{command}_pull.html>`__,
`push
<cli/{command}_push.html>`__,
`build
<cli/{command}_build.html>`__,
`exec
<cli/{command}_exec.html>`__,
`shell
<cli/{command}_shell.html>`__,
`run
<cli/{command}_run.html>`__,
`instance
<cli/{command}_instance.html>`__.),
by passing them the same ``--authfile <path>`` flag:

.. code:: 

   $ {command} shell --authfile myauthfile docker://placeforstuff/private1:latest
   INFO:    Converting OCI blobs to SIF format
   INFO:    Starting build...
   Getting image source signatures
   Copying blob 7264a8db6415 done   |
   Copying config 913cf3a39d done   |
   Writing manifest to image destination
   2023/09/28 13:15:46  info unpack layer: sha256:7264a8db6415046d36d16ba98b79778e18accee6ffa71850405994cffa9be7de
   INFO:    Creating SIF file...
   [=====================================================================]
   100 % 0s
   Apptainer>

.. note::

   If ``{ENVPREFIX}_DOCKER_{USERNAME,PASSWORD}`` or
   ``DOCKER_{USERNAME,PASSWORD}`` environment variables are set, they will take
   precedence over anything specified with the ``--authfile`` flag (or anything
   specified with the ``{ENVPREFIX}_AUTHFILE`` variable, discussed below). See
   the :ref:`documentation of docker-related environment variables
   <sec:docker_envvars>` for details.

Finally, note that logging in when the relevant credentials already exist, and
logging out when the relevant credentials are already absent, are not considered
errors:

.. code::

   $ {command} registry login -u myuser --authfile ./myauthfile docker://docker.io
   Password / Token:
   INFO:    Token stored in ./myauthfile
   $ {command} registry login -u myuser --authfile ./myauthfile docker://docker.io
   Password / Token:
   INFO:    Token stored in ./myauthfile
   $ {command} registry logout --authfile ./myauthfile docker://docker.io
   INFO:    Token removed from ./myauthfile
   INFO:    Logout succeeded
   $ {command} registry logout --authfile ./myauthfile docker://docker.io
   WARNING: There is no existing login to registry "docker.io".
   INFO:    Logout succeeded

{ENVPREFIX}_AUTHFILE
====================

In lieu of using the ``--authfile`` command-line flag, the same functionality
may be accessed by setting the ``{ENVPREFIX}_AUTHFILE`` environment variable,
both for the ``registry login`` / ``registry logout`` commands and for the `pull
<cli/{command}_pull.html>`__,
`push
<cli/{command}_push.html>`__,
`build
<cli/{command}_build.html>`__,
`exec
<cli/{command}_exec.html>`__,
`shell
<cli/{command}_shell.html>`__,
`run
<cli/{command}_run.html>`__,
`instance
<cli/{command}_instance.html>`__.
set of commands.

****************************
``docker://`` vs ``oras://``
****************************

{Project} supports two different protocols when communicating with OCI
registries.
The standard protocol is used with the ``docker://`` URI.
{Project} supports pulling OCI containers with that protocol, but it
converts the containers into its own format and does not support pushing
them back to registries using that protocol.
(Pulling can be done explicitly with either the ``pull`` command or 
implicitly by one of the action commands such as ``run``.)

On the other hand, the ``oras://`` protocol is the OCI protocol for 
artifacts, so {Project} supports pushing and pulling ``.sif``
containers using that protocol.
The name of the container is in the same format in both cases, with
a registry name, a slash, a tag name (which may itself include a slash),
a colon, and a version.
The default registry name when pulling is ``docker.io``.
The same protocol must be used when pulling a container as was used 
when pushing it.
The most popular registries are ``ghcr.io`` and ``docker.io`` and they
both support both OCI container protocols.

Here are some examples:

.. code::

   $ {command} pull docker://alpine:latest
   $ {command} pull docker://ghcr.io/apptainer/apptainer
   $ {command} pull oras://ghcr.io/apptainer/alpine
   $ {command} run docker://alpine
   $ {command} run oras://docker.io/davedykstra/lolcow

***********************
Registry mirrors
***********************

{Project} supports mirrors (caches) for registries.  Please see the
`registries.conf section <{admindocs}/configfiles.html#registry-mirror-configuration>`_
in the admin guide.  
They can be configured system-wide or by individual users.
